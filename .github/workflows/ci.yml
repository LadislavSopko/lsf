name: LSF Format CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e ./implementations/python
    
    - name: Test with pytest
      run: |
        pytest ./implementations/python/tests

  test-javascript:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.x', '16.x', '18.x']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        cd ./implementations/javascript
        npm ci
    
    - name: Run tests
      run: |
        cd ./implementations/javascript
        npm test

  test-csharp:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    
    - name: Restore dependencies
      run: dotnet restore ./implementations/csharp
    
    - name: Build
      run: dotnet build ./implementations/csharp --no-restore
    
    - name: Test
      run: dotnet test ./implementations/csharp --no-build --verbosity normal

  publish-npm:
    needs: [test-javascript]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: |
        cd ./implementations/javascript
        npm ci
    
    - name: Publish to npm
      run: |
        cd ./implementations/javascript
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

  publish-pypi:
    needs: [test-python]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        cd ./implementations/python
        python -m build
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd ./implementations/python
        twine upload dist/* 