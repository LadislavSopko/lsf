// This file is auto-generated by prompt-gen/generate.js
// DO NOT EDIT DIRECTLY - edit prompts.json and run: node implementations/prompt-gen/generate.js

namespace Zerox.LSF
{
    internal static class LLMPrompts
    {
        public const string MinimalBase = "Output in LSF format:\n$o~=object, $f~=field, $v~=value, $t~=type(n=int,f=float,b=bool,d=date,z=null)\nNO quotes/brackets. Arrays: repeat $v~. Continuous line.";
        public const string MinimalExample = "Example: $o~$f~name$v~John$f~age$v~30$t~n$f~tags$v~a$v~b";
        public const string DetailedBase = "Generate output in LSF (LLM-Safe Format):\n\nTOKENS:\n- $o~ = start object\n- $f~ = field name follows\n- $v~ = value follows  \n- $t~ = type hint follows (single character)\n\nTYPES:\n- n = integer (e.g., 42)\n- f = float (e.g., 3.14)\n- b = boolean (true/false)\n- d = datetime (ISO format)\n- s = string (optional, default)\n- z = null\n\nRULES:\n1. NO quotes, brackets, or commas anywhere\n2. NO newlines between tokens (continuous stream)\n3. Arrays: repeat $v~ for same field\n4. Multi-line strings: write actual newlines, not \\n\n5. Write all special characters as-is\n6. NO escaping - write everything literally";
        public const string DetailedExample = "EXAMPLE:\n$o~$f~name$v~John Doe$f~age$v~30$t~n$f~active$v~true$t~b$f~tags$v~admin$v~user";
        
        public static string GetPrompt(bool includeExample, string style)
        {
            if (style == "detailed")
            {
                return includeExample ? DetailedBase + "\n" + DetailedExample : DetailedBase;
            }
            return includeExample ? MinimalBase + "\n" + MinimalExample : MinimalBase;
        }
    }
}